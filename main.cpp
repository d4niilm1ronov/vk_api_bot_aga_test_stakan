#include <iostream>
#include <fstream>
#include <string>
#include <map>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;



#include "vkAPI/support/very_eassy_curl.hpp"

#include "vkAPI/vk_api.hpp"
#include "vkAPI/long_poll.hpp"
#include "vkAPI/token_vk.hpp"

#include "functions/functions.hpp"

// –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è data_base::users
    filesystem::path data_base::users::data_path      = "data/database_user.json";
    map<unsigned int, data_base::user::info> data_base::users::data;

    filesystem::path data_base::users::changelog_path = "data/changelog_user.json";
    fstream data_base::users::changelog(data_base::users::changelog_path, ios::out | ios::in | ios::app);

    map<unsigned int, json> data_base::users::hash;

int main() {
    srand(time(NULL));

    // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è vkAPI
        const std::string my_token = "c7364e48cab5cbd2ae3268104fb95d7b8dfa830431a664f256bf9dae36b31685efef421173ac8f784076f";
        const unsigned int group_id = 193038255;

        vkapi::token_group test_token(my_token, group_id);
        vkapi::bots_long_poll test_blp = test_token.groups_getLongPollServer();

        json ans_longpoll_json; 

    // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è data_base::users
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –ë–î'—à–µ–∫
        file::dublicate(data_base::users::data_path, "data/dublicate");
        file::dublicate(data_base::users::changelog_path, "data/dublicate");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –û–ó–£
        data_base::users::download_data();

        // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ data_base::users::changelog
        if (!file::empty(data_base::users::changelog_path)) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –û–ó–£ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            data_base::users::download_changelog();

            // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ changelog
            data_base::users::changelog .close();
            file::clear(data_base::users::changelog_path);
            data_base::users::changelog
                .open(data_base::users::changelog_path, ios::out | ios::in | ios::app);
        }

    // –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª üí™üòé
        while(true) {
            // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Bots Long Poll API ‚ùóÔ∏è
            ans_longpoll_json = test_blp.request_lp();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Bots Long Poll API üìõ
            if (ans_longpoll_json.count("failed")) {
                // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å ts (1)
                if (ans_longpoll_json["failed"] == 1) {
                    test_blp.set_ts(ans_longpoll_json["ts"]);
                    continue;
                } else
                
                // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key (2)
                if (ans_longpoll_json["failed"] == 2 ) {
                    test_blp = test_token.groups_getLongPollServer();
                    continue;
                } else

                // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key –∏ ts (3)
                if (ans_longpoll_json["failed"] == 3) {
                    test_blp = test_token.groups_getLongPollServer();
                    continue;
                }
                
                else {
                    cout << "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] "
                            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ Bots Long Poll" << endl;
                    break;
                }
            }

            bool stop_flag = false;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üîÑ
            for (unsigned int i = 0; ans_longpoll_json["updates"].size() > i; i++) {
                const json message_json = move(ans_longpoll_json["updates"][i]["object"]["message"]);

                if (!data_base::user::check(message_json["peer_id"])) {
                    data_base::user::add(message_json["peer_id"]);
                }

                if (message_json["text"] == std::string("—Å—Ç–æ–ø")) {
                    stop_flag = true;
                }

            }

            if (stop_flag) { break; }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—ã—Ç–∏–π üõ†
            test_blp.set_ts(stoi(std::string(ans_longpoll_json["ts"])));
        }

        // –¶–∏–∫–ª (—Å–æ–±—ã—Ç–∏—è BLP API) {
            //     –µ—Å–ª–∏ (üë§ üôÖ‚Äç‚ôÄÔ∏è –≤ üóÇ) {
            //         –¥–æ–±–∞–≤–∏—Ç—å üë§ –≤ üóÇ;
            //         –æ—Ç–ø—Ä–∞–≤–∏—Ç—å üëã;
            //     }
            //
            //     –∏–Ω–∞—á–µ {
            //         (—É–∑–Ω–∞—Ç—å –∫—Ç–æ üë§ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–∏—Å—å–º–∞)
            //         —É–∑–Ω–∞—Ç—å stage —É üë§;
            //         –∑–∞–≥—Ä—É–∑–∏—Ç—å üì© –≤ stage —ç—Ç–æ–≥–æ üë§;
            //     }
            // }
            //
            // [–û–ø–µ—Ä–∞—Ü–∏—è] –°–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
            // [–û–ø–µ—Ä–∞—Ü–∏–∏] –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            // 
            // [–û–ø–µ—Ä–∞—Ü–∏–∏] –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
        data_base::users::upload_data();
    

    return 0;
}