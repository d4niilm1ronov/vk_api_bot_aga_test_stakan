#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <map>
#include <iterator>
#include <ctime>
#include <vector>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

#include "vkAPI/support/very_eassy_curl.hpp"

#include "vkAPI/vk_api.hpp"
#include "vkAPI/long_poll.hpp"
#include "vkAPI/token_vk.hpp"

#include "functions/functions.hpp"



////////////////////////////////////////////////////////////////////////

int main() {
    // –û—Å—Ç–∞–ª—å–Ω–æ–µ
    json ans_longpoll_json;

    general::upload();

    cout << stage::message.size() << endl;

    // –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª üí™üòé
    while(true) {
        bool stop_flag = false;
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Bots Long Poll API üì©
        ans_longpoll_json = test_blp.request_lp();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Bots Long Poll API üìõ
        if (ans_longpoll_json.count("failed")) {
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å ts (1)
            if (ans_longpoll_json["failed"] == 1) {
                test_blp.set_ts(ans_longpoll_json["ts"]);
                continue;
            } else
            
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key (2)
            if (ans_longpoll_json["failed"] == 2 ) {
                test_blp = test_token.groups_getLongPollServer();
                continue;
            } else

            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key –∏ ts (3)
            if (ans_longpoll_json["failed"] == 3) {
                test_blp = test_token.groups_getLongPollServer();
                continue;
            }
            
            else {
                cout << "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] "
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ Bots Long Poll" << endl;
                break;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üîÑ
        for (unsigned int i = 0; ans_longpoll_json["updates"].size() > i; i++) {
            const json message = move(ans_longpoll_json["updates"][i]["object"]["message"]);
            unsigned int peer_id = message["peer_id"];

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            if (!data_base::user::check(peer_id)) {
                data_base::user::add(peer_id);
                data_base::users::hash.insert({peer_id, json()});
                test_token.messages_send(peer_id, ready_mesg["welcome"]);
                test_token.messages_send(peer_id, stage::message["menu_guest"]);
                continue;
            }

            // –í—ã–≤–æ–¥ –º–µ–Ω—é (–æ—Ç –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
            if (data_base::users::data[peer_id].stage == "error") {
                data_base::users::data[peer_id].stage = what_menu(peer_id);

                json answer_message;
                answer_message["text"] = "–ë—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –í–∞—Å –≤–µ—Ä–Ω—É–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ - –ú–µ–Ω—é üòå";
                test_token.messages_send(peer_id, answer_message);

                test_token.messages_send(peer_id, stage::message[data_base::users::data[peer_id].stage]);

                data_base::user::push_changelog(peer_id);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!its_text_message(message)) {
                json answer_message;
                answer_message["text"] = "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ ü•¥";
                test_token.messages_send(peer_id, answer_message); 
                continue;
            }

            // –°—Ç–æ–ø-—Å–ª–æ–≤–æ
            if (message["text"] == std::string("—Å—Ç–æ–ø")) {
                stop_flag = true; break;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            stage::function[data_base::users::data[peer_id].stage](message);
        }
        
        auto temp_date = date::get_current_date();
        cout << temp_date.tm_mday << "." <<  temp_date.tm_mon + 1 << "." << temp_date.tm_year + 1900 << " " << temp_date.tm_hour << ":" << temp_date.tm_min << ":" << temp_date.tm_sec  << " (" << temp_date.tm_yday  << ")" << endl;

        // –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ—Ä—ã–≤–µ üõé
        if (date::time_to_break()) {
            for (auto peer_id : notification) {
                cout << 2222 << endl;
                test_token.messages_send(peer_id, ready_mesg["break"]);
            }

            notification.clear();
        }

        // –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ ‚è∞
        if (date::current_lesson != date::get_stage_tt()) {
            cout << "–ü–ê–†–ê" << endl;
            auto stage_tt = date::get_stage_tt();
            int tm_yday = date::get_current_date().tm_yday + 1;
            
            if (date::get_stage_tt() != 0) {

                cout << "–ü–ê–†–ê2" << endl;

                for (auto user : data_base::users::data) {
                    if (user.second.send_id == 0) { continue; }
                    string path_tt = string("data/users/tt") + to_string(user.first) + "/" + date::arr_wday[date::get_current_date().tm_wday];
                    cout << path_tt << endl;
                    json json_tt; ifstream(path_tt) >> json_tt;
                    
                    for (int i = 0; i < json_tt.size(); i++) {
                        // –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        if (stage_tt == json_tt[i]["time"]) {
                            cout << "find" << endl;

                            cout << int(json_tt[i]["dates"][0]) << " vs " << tm_yday << endl;

                            // –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ (–ø–æ—á–µ–º—É-—Ç–æ) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
                            if (json_tt[i]["dates"][0] < tm_yday) {
                                cout << "kill" << endl;
                                for (int i = 0; json_tt[i]["dates"].size() > i; i++) {
                                    if (json_tt[i]["dates"][0] >= tm_yday) { break; }
                                    json_tt[i]["dates"].erase(0);
                                }

                                if (json_tt[i]["dates"].empty()) {
                                    json_tt.erase(i);
                                    ofstream(path_tt, ios::trunc) << json_tt;
                                    continue;
                                }

                                ofstream(path_tt, ios::trunc) << json_tt;
                            }


                            // –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –µ—â–µ –∏ –ø–æ –¥–∞—Ç–µ
                            if (json_tt[i]["dates"][0] == tm_yday) {
                                cout << "FIND!" << endl;
                                json lesson = json_tt[i];
                                json mesg;
                                string text;

                                // –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ
                                json_tt[i]["dates"].erase(0);
                                // –ï—Å–ª–∏ –¥–∞—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ —ç—Ç–æ–º—É –∑–∞–Ω—è—Ç–∏—é - —É–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ
                                if (json_tt[i]["dates"].empty()) { json_tt.erase(i); }
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                                ofstream(path_tt, ios::trunc) << json_tt;

                                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è
                                if (stage_tt == 1) { text = "–ü–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ (08:30 - 10:10)"; } else
                                if (stage_tt == 2) { text = "–í—Ç–æ—Ä–æ–µ –∑–∞–Ω—è—Ç–∏–µ (10:20 - 12:00)"; } else
                                if (stage_tt == 3) { text = "–¢—Ä–µ—Ç—å–µ –∑–∞–Ω—è—Ç–∏–µ (12:20 - 14:00)"; } else
                                if (stage_tt == 4) { text = "–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –∑–∞–Ω—è—Ç–∏–µ (14:10 - 15:50)"; } else
                                if (stage_tt == 5) { text = "–ü—è—Ç–æ–µ –∑–∞–Ω—è—Ç–∏–µ (16:00 - 17:40)"; } else
                                if (stage_tt == 6) { text = "–®–µ—Å—Ç–æ–µ –∑–∞–Ω—è—Ç–∏–µ (18:00 - 19:30)"; } else
                                if (stage_tt == 7) { text = "–°–µ–¥—å–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ (19:40 - 21:10)"; } else
                                                   { text = "–í–æ—Å—å–º–æ–µ –∑–∞–Ω—è—Ç–∏–µ (21:20 - 22:50)"; }

                                mesg["text"] = text; text.clear();
                                cout << test_token.messages_send(user.second.send_id, mesg) << endl;

                                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏
                                text = string(lesson["name"]);

                               
                                if (lesson.count("room")) {
                                     text += "\nüìå –ê—É–¥. ";
                                    if (lesson["room"].is_string()) {
                                        text += string(lesson["room"]);
                                    } else {
                                        // üìå –î–û–ë–ê–í–ò–¢–¨ –î–û–ë–ê–í–ò–¢–¨ –î–û–ë–ê–í–ò–¢–¨ üìå
                                    }
                                }

                                if (lesson["type_lesson"] == 1) {
                                    text = text + "\nüìå –õ–µ–∫—Ü–∏—è";
                                } else
                                if (lesson["type_lesson"] == 2) {
                                    text = text + "\nüìå C–µ–º–∏–Ω–∞—Ä";
                                } else {
                                    text = text + "\nüìå –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è";
                                    if (lesson.count("group")) {
                                        text = text + "\nüìå " + string(lesson["group"]);
                                    }
                                }

                                if (lesson.count("teacher")) {
                                    text = text + "\nüìå " + string(lesson["teacher"]);
                                }
                                
                                mesg["text"] = text;
                                cout << test_token.messages_send(user.second.send_id, mesg) << endl;

                                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –ø–µ—Ä–µ—Ä—ã–≤–µ
                                notification.push_back(user.second.send_id);
                            }
                        } else

                        if (stage_tt < json_tt[i]["time"]) { break; }
                    }
                }
            }

            date::current_lesson = stage_tt;
        }

        if (stop_flag) { break; }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—ã—Ç–∏–π üõ†
        test_blp.set_ts(stoi(std::string(ans_longpoll_json["ts"])));
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
    data_base::users::upload_data();
    
    

    return 0;
}