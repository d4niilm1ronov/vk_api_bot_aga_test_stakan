#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <map>
#include <iterator>
#include <ctime>
#include <vector>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "vkAPI/support/very_eassy_curl.hpp"
#include "vkAPI/vk_api.hpp"
#include "vkAPI/long_poll.hpp"
#include "vkAPI/token_vk.hpp"

#include "data_base.hpp"

#include "date.hpp"

#include "additionally.hpp"

#include "stage.hpp"

////////////////////////////////////////////////////////////////////////

int main(int argc, char *argv[]) {

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫-—Ç–æ–∫–µ–Ω–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    {
        string str_ans;
        int int_ans;

        // –ê–†–ì–£–ú–ï–ù–¢ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞,
        // –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–∂–µ–∏—Ç
        if (argc > 1) { ifstream(argv[1]) >> str_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: "; cin >> str_ans; }

        // –ê–†–ì–£–ú–ï–ù–¢ 2: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ,
        // –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç
        if (argc > 2) { ifstream(argv[2]) >> int_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: "; cin >> int_ans; }

        // [–ò–∑–º–µ–Ω–∏—Ç—å]
        // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        // —Å—Ç–∞—Ä—ã–π_—Ç–æ–∫–µ–Ω = –Ω–æ–≤—ã–π_—Ç–æ–∫–µ–Ω

        // –ê–†–ì–£–ú–ï–ù–¢ 3: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î (SQLite 3)
        if (argc > 3) { ifstream(argv[3]) >> str_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite 3): "; cin >> str_ans; }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sqlite::database test_db(argv[3]); data_base::db = test_db;
    }


    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ stage::message
    {
        json   message_json;
        string message_name;

        for (auto& p : std::__fs::filesystem::directory_iterator("data/stages")) {
            if (p.path().extension().string() == ".json") {
                message_name = p.path().stem().string();
                std::ifstream(p.path()) >> message_json;

                stage::message.insert({message_name, message_json});
            }
        }
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ stage::function
    {
        stage::function.insert({"menu_guest", stage::menu_guest});
        stage::function.insert({"menu_user", stage::menu_user});

        stage::function.insert({"setting_timetable_institute", stage::setting_timetable_institute});
        stage::function.insert({"setting_timetable_year", stage::setting_timetable_year});
        stage::function.insert({"setting_timetable_group", stage::setting_timetable_group});
        stage::function.insert({"setting_timetable_lab_group", stage::setting_timetable_lab_group});

    }

    


    // –û—Å—Ç–∞–ª—å–Ω–æ–µ
    json ans_longpoll_json;

    auto test_blp = stankin_bot.groups_getLongPollServer();
    vkapi::token_group& test_token = stankin_bot;

    // –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª üí™üòé
    while(true) {

        // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Bots Long Poll API üì©
        ans_longpoll_json = test_blp.request_lp();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Bots Long Poll API üìõ
        if (ans_longpoll_json.count("failed")) {
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å ts (1)
            if (ans_longpoll_json["failed"] == 1) {
                test_blp.set_ts(ans_longpoll_json["ts"]);
                continue;
            } else
            
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key (2)
            if (ans_longpoll_json["failed"] == 2) {
                test_blp = test_token.groups_getLongPollServer();
                continue;
            } else

            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key –∏ ts (3)
            if (ans_longpoll_json["failed"] == 3) {
                test_blp = test_token.groups_getLongPollServer();
                continue;
            }
            
            else {
                cout << "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] "
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ Bots Long Poll" << endl;
                break;
            }
        }


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üîÑ
        for (unsigned int i = 0; ans_longpoll_json["updates"].size() > i; i++) {
            const json message = move(ans_longpoll_json["updates"][i]["object"]["message"]);
            uint peer_id = message["peer_id"];

            // –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 
            if (peer_id >= 2000000000) { continue; } else

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            if (!data_base::check_user_id(peer_id)) {
                data_base::add_user(peer_id);
                easy::vkapi::messages_send(stage::message["menu_guest"], peer_id);
            } else

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!its_text_message(message)) {
                easy::vkapi::messages_send(string("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ ü§∑‚Äç‚ôÄÔ∏è"), peer_id); 
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                stage::function[data_base::get_user_stage(peer_id)](message);
            }
        }


        // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã (–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏–π)

        if (time_university::last_number_lesson != time_university::get_current_number_lesson()) {

            time_university::last_number_lesson = time_university::get_current_number_lesson();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –ø–∞—Ä–∞, –∞ –Ω–µ –∫–æ–Ω–µ—Ü —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è
            if (time_university::last_number_lesson) {
                auto vec_lesson = data_base::get_cur_less(
                    time_university::last_number_lesson,
                    time_university::get_current_date()
                );

                for (auto i: vec_lesson) {
                    string text = "–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ üë©‚Äçüè´\n\n";
                    text = text + string(i["lesson"]["name"]);
                    

                    if (int(i["lesson"]["type"]) == 1) { text = text + " [–õ–µ–∫—Ü–∏—è]\n"; } else
                    if (int(i["lesson"]["type"]) == 2) { text = text + " [–°–µ–º–∏–Ω–∞—Ä]\n"; } else
                                                       { text = text + " [–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞]\n"; }

                    if (i["lesson"]["place"] != "null") {
                        text = text + "–ê—É–¥–∏—Ç–æ—Ä–∏—è: " + string(i["lesson"]["place"]) + "\n";
                    }

                    if (i["lesson"]["teacher"] != "null") {
                        text = text + "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + string(i["lesson"]["teacher"]) + "\n";
                    }
                    

                    easy::vkapi::messages_send(text, uint(i["user"]["id"]));
                }
            }
        }


        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—ã—Ç–∏–π üõ†
        test_blp.set_ts(stoi(std::string(ans_longpoll_json["ts"])));
    }


    return 0;
}