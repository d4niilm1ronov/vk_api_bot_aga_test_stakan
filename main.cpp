#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <map>
#include <iterator>
#include <ctime>
#include <vector>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "vkAPI/support/very_eassy_curl.hpp"
#include "vkAPI/vk_api.hpp"
#include "vkAPI/long_poll.hpp"
#include "vkAPI/token_vk.hpp"

#include "data_base.hpp"

#include "date.hpp"

#include "additionally.hpp"

#include "stage.hpp"


///////////////////////////////////////////////////////////////////////////


// —Ç–æ–∫–µ–Ω –∏ id —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
vkapi::token_group stankin_bot("MDA", 180900);


///////////////////////////////////////////////////////////////////////////


int main(int argc, char *argv[]) {

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫-—Ç–æ–∫–µ–Ω–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    {
        string str_ans;
        int int_ans;

        // –ê–†–ì–£–ú–ï–ù–¢ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–∫–µ–Ω –±–æ—Ç–∞,
        // –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–∂–µ–∏—Ç
        if (argc > 1) { ifstream(argv[1]) >> str_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: "; cin >> str_ans; }

        // –ê–†–ì–£–ú–ï–ù–¢ 2: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ,
        // –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç
        if (argc > 2) { ifstream(argv[2]) >> int_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: "; cin >> int_ans; }

        vkapi::token_group new_token(str_ans, int_ans);
        stankin_bot = new_token;


        // –ê–†–ì–£–ú–ï–ù–¢ 3: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î (SQLite 3)
        if (argc > 3) { ifstream(argv[3]) >> str_ans; }
        else { cout << "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite 3): "; cin >> str_ans; }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sqlite::database test_db(argv[3]); data_base::db = test_db;
    }


    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ stage::message
    {
        json   message_json;
        string message_name;

        for (auto& p : std::__fs::filesystem::directory_iterator("data/stages")) {
            if (p.path().extension().string() == ".json") {
                message_name = p.path().stem().string();
                std::ifstream(p.path()) >> message_json;

                stage::message.insert({message_name, message_json});
            }
        }
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ stage::function
    {
        stage::function.insert({"menu_guest", stage::menu_guest});
        stage::function.insert({"menu_user", stage::menu_user});

        stage::function.insert({"setting_timetable_institute", stage::setting_timetable_institute});
        stage::function.insert({"setting_timetable_year", stage::setting_timetable_year});
        stage::function.insert({"setting_timetable_group", stage::setting_timetable_group});
        stage::function.insert({"setting_timetable_lab_group", stage::setting_timetable_lab_group});

    }


    // –£–¥–∞–ª–µ–Ω–∏–µ/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü ¬´lesson¬ª –∏ ¬´lesson_stankin¬ª
    {
        uint current_date__YYMMDD = time_stakan::get_current_date().format_yymmdd();

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ lesson (—Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        data_base::db << "DELETE FROM lesson WHERE (date_end < ? ) OR ( (date <= ? ) AND (date_end = ? ) AND (time < ? ) ) ;"
                      << current_date__YYMMDD << current_date__YYMMDD << current_date__YYMMDD
                      << time_stakan::get_current_number_lesson();

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ lesson_stankin (—Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        data_base::db << "DELETE FROM lesson_stankin WHERE (date_end < ? ) OR ( (date <= ? ) AND (date_end = ? ) AND (time < ? ) ) ;"
                      << current_date__YYMMDD << current_date__YYMMDD << current_date__YYMMDD
                      << time_stakan::get_current_number_lesson();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (time_stakan::last_number_lesson != 0) {

            // –î–∞—Ç–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å (–≤ —Ç–∏–ø–µ time_stakan::date)
            time_stakan::date current_date = time_stakan::get_current_date();

            // –ü–æ–ª—É—á–∞—é –≤ –í–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏–∏ –∑–∞–Ω—è—Ç–∏—è
            auto vector__lesson_user = data_base::get_cur_less(
                time_stakan::last_number_lesson ,
                current_date.format_yymmdd()
            );

            // –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º –∑–∞–Ω—è—Ç–∏–π
            for (auto iter: vector__lesson_user) {

                uint date_YYMMDD         = iter["lesson"]["date"];
                uint current_date_YYMMDD = current_date.format_yymmdd();

                while (current_date_YYMMDD > date_YYMMDD) {
                    if (iter["lesson"]["repit"] == 1) {
                        date_YYMMDD = time_stakan::date(date_YYMMDD) .plus_one_week() .format_yymmdd();
                    } else {
                        date_YYMMDD = time_stakan::date(date_YYMMDD) .plus_two_week() .format_yymmdd();
                    }
                }

                // –ò–∑–º–µ–Ω—è–µ–º –¥–∞—Ç—É –≤ –ë–î
                data_base::db << "UPDATE lesson SET date = ? WHERE id = ? ;"
                              << date_YYMMDD
                              << uint(iter["lesson"]["id"]);

            }
        }
    
    }
    
    
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bots LongPoll VK API
    auto bots_longpoll__stankin_bot = stankin_bot.groups_getLongPollServer();

    // –û—Ç–≤–µ—Ç –æ—Ç VK API (–ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ LongPoll) –≤ —Ñ–æ—Ä–º–∞—Ç–µ Json
    json json__answer_longpoll;


    // –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª üí™üòé
    while(true) {
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Bots Long Poll API üì©
        json json__answer_longpoll = bots_longpoll__stankin_bot.request_lp();


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Bots Long Poll API üìõ
        if (json__answer_longpoll.count("failed")) {
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å ts (1)
            if (json__answer_longpoll["failed"] == 1) {
                bots_longpoll__stankin_bot.set_ts(json__answer_longpoll["ts"]);
                continue;
            } else
            
            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key (2)
            if (json__answer_longpoll["failed"] == 2) {
                bots_longpoll__stankin_bot = stankin_bot.groups_getLongPollServer();
                continue;
            } else

            // –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å key –∏ ts (3)
            if (json__answer_longpoll["failed"] == 3) {
                bots_longpoll__stankin_bot = stankin_bot.groups_getLongPollServer();
                continue;
            }
            
            else {
                cout << "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞] "
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ Bots Long Poll" << endl;
                break;
            }
        }


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üîÑ
        for (unsigned int i = 0; json__answer_longpoll["updates"].size() > i; i++) {
            const json message = move(json__answer_longpoll["updates"][i]["object"]["message"]);
            uint peer_id = message["peer_id"];

            // –ó–∞–≥–ª—É—à–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ 
            if (peer_id >= 2000000000) { continue; } else

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            if (!data_base::check_user_id(peer_id)) {
                data_base::add_user(peer_id);
                easy::vkapi::messages_send(stage::message["menu_guest"], peer_id);
            } else

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (!its_text_message(message)) {
                easy::vkapi::messages_send(string("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ ü§∑‚Äç‚ôÄÔ∏è"), peer_id); 
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                stage::function[data_base::get_user_stage(peer_id)](message);
            }
        }


        // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã (–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏–π)
        if (time_stakan::last_number_lesson != time_stakan::get_current_number_lesson()) {

            time_stakan::last_number_lesson = time_stakan::get_current_number_lesson();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ –ø–∞—Ä–∞, –∞ –Ω–µ –∫–æ–Ω–µ—Ü —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è
            if ((time_stakan::last_number_lesson > 0) and (time_stakan::last_number_lesson < 9)) {
                // –ü–æ–ª—É—á–∞—é –≤ –í–µ–∫—Ç–æ—Ä –∑–∞–Ω—è—Ç–∏—è, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
                auto vector__lesson_user = data_base::get_cur_less(
                    time_stakan::last_number_lesson,
                    time_stakan::get_current_date().format_yymmdd()
                );


                // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏    
                for (auto i: vector__lesson_user) {
                    string text = "–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ üë©‚Äçüè´\n\n";
                    text = text + string(i["lesson"]["name"]);
                    

                    if (int(i["lesson"]["type"]) == 1) { text = text + " [–õ–µ–∫—Ü–∏—è]\n"; } else
                    if (int(i["lesson"]["type"]) == 2) { text = text + " [–°–µ–º–∏–Ω–∞—Ä]\n"; } else
                                                       { text = text + " [–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞]\n"; }

                    if (i["lesson"]["place"] != "null") {
                        text = text + "–ê—É–¥–∏—Ç–æ—Ä–∏—è: " + string(i["lesson"]["place"]) + "\n";
                    }

                    if (i["lesson"]["teacher"] != "null") {
                        text = text + "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + string(i["lesson"]["teacher"]) + "\n";
                    }
                    

                    easy::vkapi::messages_send(text, uint(i["user"]["id"]));
                }


                // –£–¥–∞–ª–µ–Ω–∏–µ/–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ—à–ª—ã—Ö –∑–∞–Ω—è—Ç–∏–π
                if (time_stakan::last_number_lesson != 0) {

                    // –î–∞—Ç–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–µ–π—á–∞—Å (–≤ —Ç–∏–ø–µ time_stakan::date)
                    time_stakan::date current_date = time_stakan::get_current_date();

                    // –ü–æ–ª—É—á–∞—é –≤ –í–µ–∫—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏–∏ –∑–∞–Ω—è—Ç–∏—è
                    auto vector__lesson_user = data_base::get_cur_less(
                        time_stakan::last_number_lesson - 1,
                        current_date.format_yymmdd()
                    );

                    // –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º 
                    for (auto iter: vector__lesson_user) {

                        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —É –∑–∞–Ω—è—Ç–∏—è
                        if (current_date.format_yymmdd() == iter["lesson"]["date_end"]) {
                            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                            data_base::db << "DELETE FROM lesson WHERE id = ? ;"
                                            << uint(iter["lesson"]["id"]);
                        }

                        // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —É –∑–∞–Ω—è—Ç–∏—è
                        else {
                            uint date_YYMMDD = iter["lesson"]["date"];
                            time_stakan::date next_date(date_YYMMDD);

                            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ 1-2 –Ω–µ–¥–µ–ª–∏
                            if (iter["lesson"]["repit"] == 2) {
                                data_base::db << "UPDATE lesson SET date = ? WHERE id = ? ;"
                                              << current_date .plus_two_week() .format_yymmdd()
                                              << uint(iter["lesson"]["id"]);
                            }

                            else {
                                data_base::db << "UPDATE lesson SET date = ? WHERE id = ? ;"
                                              << current_date .plus_one_week() .format_yymmdd()
                                              << uint(iter["lesson"]["id"]);
                            }
                        }

                    }
                }
            }
        }


        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—ã—Ç–∏–π üõ†
        bots_longpoll__stankin_bot.set_ts(stoi(std::string(json__answer_longpoll["ts"])));
    }


    return 0;
}