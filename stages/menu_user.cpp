#include <iostream>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <map>

#include <string>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "../sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "../vkAPI/support/very_eassy_curl.hpp"
#include "../vkAPI/vk_api.hpp"
#include "../vkAPI/long_poll.hpp"
#include "../vkAPI/token_vk.hpp"

#include "../data_base.hpp"

#include "../additionally.hpp"

#include "../stage.hpp"

#include "../date.hpp"

/* ////////////////////////////////////////////////////////////////////////

{
    "text":"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:1) –ó–∞–Ω—è—Ç–∏–µ —Å–µ–π—á–∞—Å\n2) –ó–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è\n3) –ó–∞–Ω—è—Ç–∏—è –∑–∞–≤—Ç—Ä–∞\n\n0) –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
    "keyboard":{
        "buttons":[
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–°–µ–π—á–∞—Å",
                        "payload":"1"
                    },
                    "color":"primary"
                },
                {
                    "action":{
                        "type":"text",
                        "label":"–°–µ–≥–æ–¥–Ω—è",
                        "payload":"2"
                    },
                    "color":"primary"
                },
                {
                    "action":{
                        "type":"text",
                        "label":"–ó–∞–≤—Ç—Ä–∞",
                        "payload":"3"
                    },
                    "color":"primary"
                }
            ],
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                        "payload":"20545"
                    },
                    "color":"secondary"
                }
            ]
        ]
    }
}

*/ ////////////////////////////////////////////////////////////////////////

void stage :: menu_user (const json& message) {
    // –£–¥–∞–ª—è–µ—Ç—Å—è
    //  1. ["menu"] (string)
    //
    // –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    //  1. ["menu"] = "user"

    const string current_stage = "menu_user";

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    uint   peer_id    = message["peer_id"];
    string next_stage = data_base::get_user_stage(peer_id);
    json   user_cache = data_base::get_user_cache(peer_id);


    // --------------------------------------------------------------------

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ—à–ª–æ–≥–æ stage –ø–æ–ø–∞–ª –Ω–∞ —ç—Ç–æ—Ç stage
    if (next_stage != current_stage) {
        if (user_cache.count("menu")) { user_cache.erase("menu"); }

        data_base::set_user_cache(peer_id, user_cache);
        data_base::set_user_stage(peer_id, current_stage);
        easy::vkapi::messages_send(stage::message[current_stage], peer_id);
    }


    // --------------------------------------------------------------------


    else {

        // –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        if (message.count("payload")) {
            if (message["payload"] == "1") { next_stage = "print_current_lesson__menu_user"; } else
            if (message["payload"] == "2") { next_stage = "print_today_lesson__menu_user"; } else
            if (message["payload"] == "3") { next_stage = "print_tomorrow_lesson__menu_user"; } else
            if (message["payload"] == "20545") { next_stage = "menu_guest"; }
        }
        

        // –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç
        else {
            if (message["text"] == "1") { next_stage = "print_current_lesson__menu_user"; } else
            if (message["text"] == "2") { next_stage = "print_today_lesson__menu_user"; }   else
            if (message["text"] == "3") { next_stage = "print_tomorrow_lesson__menu_user"; } else
            if (message["text"] == "0") { next_stage = "menu_guest"; }
        }


        // --------------------------------------------------------------------


        data_base::set_user_cache(peer_id, user_cache);


        if (next_stage == "print_current_lesson__menu_user") {

            vector<json> vector__lesson_user = data_base::get_lesson__user (
                peer_id,
                time_stakan::get_current_date().format_mmdd(),
                time_stakan::last_number_lesson
            );
            
            if (vector__lesson_user.size()) { easy::vkapi::messages_send(string("–ó–∞–Ω—è—Ç–∏–µ —Å–µ–π—á–∞—Å üëá"    ), peer_id); }
            else                            { easy::vkapi::messages_send(string("–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è ü§∑‚Äç‚ôÄÔ∏è"), peer_id); }

            // –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º 
            for (auto iter: vector__lesson_user) {
                string text;

                text += string(iter["name"]) + " ";

                if (iter["type"] == 1) { text += string("[–õ–µ–∫—Ü–∏—è]\n"); }  else
                if (iter["type"] == 2) { text += string("[–°–µ–º–∏–Ω–∞—Ä]\n"); } else
                if (iter["type"] == 3) { text += string("[–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è]\n"); }

                if (iter["time"] == 1) { text += string("–í—Ä–µ–º—è: –¥–æ 10:10"); } else
                if (iter["time"] == 2) { text += string("–í—Ä–µ–º—è: –¥–æ 12:00"); } else
                if (iter["time"] == 3) { text += string("–í—Ä–µ–º—è: –¥–æ 14:00"); } else
                if (iter["time"] == 4) { text += string("–í—Ä–µ–º—è: –¥–æ 15:50"); } else
                if (iter["time"] == 5) { text += string("–í—Ä–µ–º—è: –¥–æ 17:40"); } else
                if (iter["time"] == 6) { text += string("–í—Ä–µ–º—è: –¥–æ 19:30"); } else
                if (iter["time"] == 7) { text += string("–í—Ä–µ–º—è: –¥–æ 21:10"); }
                else                             { text += string("–í—Ä–µ–º—è: –¥–æ 22:50"); }

                if ( iter["place"] != "null")
                    { text += string("\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ") + string(iter["place"]); }

                if ( iter["teacher"] != "null")
                    { text += string("\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ") + string(iter["teacher"]); }

                if ( iter["lab_group"] != "null")
                    { text += string("\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: ") + string(iter["lab_group"]); }
                

                easy::vkapi::messages_send(text, peer_id);
            }

        } else

        if (next_stage == "print_today_lesson__menu_user") {

            vector<json> vector__lesson_user = data_base::get_lesson__user (
                peer_id,
                time_stakan::get_current_date().format_mmdd()
            );
            
            if (vector__lesson_user.size()) { easy::vkapi::messages_send(string("–ó–∞–Ω—è—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è üëá"    ), peer_id); }
            else                            { easy::vkapi::messages_send(string("–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π ü§∑‚Äç‚ôÄÔ∏è"), peer_id); }

            // –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º 
            for (auto iter: vector__lesson_user) {
                string text;

                text += string(iter["name"]) + " ";

                if (iter["type"] == 1) { text += string("[–õ–µ–∫—Ü–∏—è]\n"); }  else
                if (iter["type"] == 2) { text += string("[–°–µ–º–∏–Ω–∞—Ä]\n"); } else
                if (iter["type"] == 3) { text += string("[–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è]\n"); }

                if (iter["time"] == 1) { text += string("–í—Ä–µ–º—è: 08:30 - 10:10"); } else
                if (iter["time"] == 2) { text += string("–í—Ä–µ–º—è: 10:20 - 12:00"); } else
                if (iter["time"] == 3) { text += string("–í—Ä–µ–º—è: 12:20 - 14:00"); } else
                if (iter["time"] == 4) { text += string("–í—Ä–µ–º—è: 14:10 - 15:50"); } else
                if (iter["time"] == 5) { text += string("–í—Ä–µ–º—è: 16:00 - 17:40"); } else
                if (iter["time"] == 6) { text += string("–í—Ä–µ–º—è: 18:00 - 19:30"); } else
                if (iter["time"] == 7) { text += string("–í—Ä–µ–º—è: 19:40 - 21:10"); }
                else                             { text += string("–í—Ä–µ–º—è: 21:20 - 22:50"); }

                if ( iter["place"] != "null")
                    { text += string("\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ") + string(iter["place"]); }

                if ( iter["teacher"] != "null")
                    { text += string("\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ") + string(iter["teacher"]); }

                if ( iter["lab_group"] != "null")
                    { text += string("\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: ") + string(iter["lab_group"]); }
                

                easy::vkapi::messages_send(text, peer_id);
            }

        } else

        if (next_stage == "print_tomorrow_lesson__menu_user") {

            vector<json> vector__lesson_user = data_base::get_lesson__user (
                peer_id,
                time_stakan::get_current_date() .plus_one_day() .format_mmdd()
            );
            
            if (vector__lesson_user.size()) { easy::vkapi::messages_send(string("–ó–∞–Ω—è—Ç–∏—è –∑–∞–≤—Ç—Ä–∞ üëá"    ), peer_id); }
            else                            { easy::vkapi::messages_send(string("–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π ü§∑‚Äç‚ôÄÔ∏è"), peer_id); }

            // –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º 
            for (auto iter: vector__lesson_user) {
                string text;

                text += string(iter["name"]) + " ";

                if (iter["type"] == 1) { text += string("[–õ–µ–∫—Ü–∏—è]\n"); }  else
                if (iter["type"] == 2) { text += string("[–°–µ–º–∏–Ω–∞—Ä]\n"); } else
                if (iter["type"] == 3) { text += string("[–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è]\n"); }

                if (iter["time"] == 1) { text += string("–í—Ä–µ–º—è: 08:30 - 10:10"); } else
                if (iter["time"] == 2) { text += string("–í—Ä–µ–º—è: 10:20 - 12:00"); } else
                if (iter["time"] == 3) { text += string("–í—Ä–µ–º—è: 12:20 - 14:00"); } else
                if (iter["time"] == 4) { text += string("–í—Ä–µ–º—è: 14:10 - 15:50"); } else
                if (iter["time"] == 5) { text += string("–í—Ä–µ–º—è: 16:00 - 17:40"); } else
                if (iter["time"] == 6) { text += string("–í—Ä–µ–º—è: 18:00 - 19:30"); } else
                if (iter["time"] == 7) { text += string("–í—Ä–µ–º—è: 19:40 - 21:10"); }
                else                             { text += string("–í—Ä–µ–º—è: 21:20 - 22:50"); }

                if ( iter["place"] != "null")
                    { text += string("\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ") + string(iter["place"]); }

                if ( iter["teacher"] != "null")
                    { text += string("\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ") + string(iter["teacher"]); }

                if ( iter["lab_group"] != "null")
                    { text += string("\n–ü–æ–¥–≥—Ä—É–ø–ø–∞: ") + string(iter["lab_group"]); }
                

                easy::vkapi::messages_send(text, peer_id);
            }

        } else

        if (next_stage == "menu_guest") {
            data_base::remove_lesson(peer_id);
            easy::vkapi::messages_send(string("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üòî"), peer_id);

            data_base::set_user_cache(peer_id, user_cache);
            stage::function[next_stage](message);
        } else

        if (next_stage != current_stage) {
            user_cache["menu"] = "user";

            data_base::set_user_cache(peer_id, user_cache);
            stage::function[next_stage](message);
        }

        else { easy::vkapi::messages_send(string("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–∑ –º–µ–Ω—é üëÜ"), peer_id); }


    }
    

}