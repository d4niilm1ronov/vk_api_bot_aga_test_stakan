#include <iostream>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <map>

#include <string>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "../sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "../vkAPI/support/very_eassy_curl.hpp"
#include "../vkAPI/vk_api.hpp"
#include "../vkAPI/long_poll.hpp"
#include "../vkAPI/token_vk.hpp"

#include "../data_base.hpp"

#include "../additionally.hpp"

#include "../stage.hpp"

/* ////////////////////////////////////////////////////////////////////////

{
    "text":"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üíÅ‚Äç‚ôÄÔ∏è\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "keyboard":{
        "buttons":[
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                        "payload":"1"
                    },
                    "color":"primary"
                }
            ]
        ]
    }
}

*/ ////////////////////////////////////////////////////////////////////////

void stage :: menu_guest (const json& message) {
    // –£–¥–∞–ª—è–µ—Ç—Å—è
    //  1. ["menu"] (string)
    //
    // –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    //  1. ["menu"] = "guest"

    const string this_stage = "menu_guest";

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    uint   peer_id    = message["peer_id"];
    string user_stage = data_base::get_user_stage(peer_id);
    json   user_cache = data_base::get_user_cache(peer_id);


    // --------------------------------------------------------------------

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ—à–ª–æ–≥–æ stage –ø–æ–ø–∞–ª –Ω–∞ —ç—Ç–æ—Ç stage
    if (user_stage != this_stage) {
        if (user_cache.count("menu"))      { user_cache.erase("menu"); }
        if (user_cache.count("institute")) { user_cache.erase("institute"); }

        data_base::set_user_cache(peer_id, user_cache);
        data_base::set_user_stage(peer_id, this_stage);
        easy::vkapi::messages_send(stage::message[this_stage], peer_id);
    }

    // --------------------------------------------------------------------

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞ —ç—Ç–æ–º stage)
    else {

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—á–µ—Ä–µ–∑ payload)
        if (message.count("payload")) {
            if (message["payload"] == "1") { user_stage = "setting_timetable_institute"; }
        }
        

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (—á–µ—Ä–µ–∑ text —Å–æ–æ–±—â–µ–Ω–∏—è)
        else {
            if (message["text"] == "1") { user_stage = "setting_timetable_institute"; }
        }

        // --------------------------------------------------------------------

        // –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
        if (user_stage != this_stage) {

            user_cache["menu"] = "guest";

            data_base::set_user_cache(peer_id, user_cache);
            stage::function[user_stage](message);
        }

        else { easy::vkapi::messages_send(string("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–∑ –º–µ–Ω—é üëÜ"), peer_id); }
    }
    

}