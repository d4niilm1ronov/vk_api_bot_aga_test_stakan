#include <iostream>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <map>

#include <string>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "../sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "../vkAPI/support/very_eassy_curl.hpp"
#include "../vkAPI/vk_api.hpp"
#include "../vkAPI/long_poll.hpp"
#include "../vkAPI/token_vk.hpp"

#include "../data_base.hpp"

#include "../additionally.hpp"

#include "../stage.hpp"

/* ////////////////////////////////////////////////////////////////////////

{
    "text":"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üíÅ‚Äç‚ôÄÔ∏è\n\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "keyboard":{
        "buttons":[
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                        "payload":"1"
                    },
                    "color":"primary"
                }
            ]
        ]
    }
}

*/ ////////////////////////////////////////////////////////////////////////

void stage :: search_teacher_input (const json& message) {

    const string this_stage = "search_teacher_input";

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    uint   peer_id    = message["peer_id"];
    string user_stage = data_base::get_user_stage(peer_id);
    json   user_cache = data_base::get_user_cache(peer_id);


    // --------------------------------------------------------------------

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ—à–ª–æ–≥–æ stage –ø–æ–ø–∞–ª –Ω–∞ —ç—Ç–æ—Ç stage
    if (user_stage != this_stage) {
        data_base::set_user_cache(peer_id, user_cache);
        data_base::set_user_stage(peer_id, this_stage);
        easy::vkapi::messages_send(stage::message[this_stage], peer_id);
    }

    // --------------------------------------------------------------------

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞ —ç—Ç–æ–º stage)
    else {

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (—á–µ—Ä–µ–∑ payload)
        if (message.count("payload")) {
            if (message["payload"] == "20545") { user_stage = string("menu_") + string(user_cache["menu"]); }
        }
        

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (—á–µ—Ä–µ–∑ text —Å–æ–æ–±—â–µ–Ω–∏—è)
        else {
            if (message["text"] == "0") { user_stage = string("menu_") + string(user_cache["menu"]); }
        }

        // --------------------------------------------------------------------

        // –ü–æ–∏—Å–∫ —Ñ–∞–º–∏–ª–∏–∏
        if (user_stage == this_stage) {
            bool done = false;

            if (string(message["text"]) != "null") {
                string teacher = string(message["text"]);

                data_base::db << "SELECT ls.time, ls.arr_date, ls.name, ls.place "
                                 "FROM lesson_stankin AS ls "
                                 "WHERE teacher = ? "
                                 "ORDER BY ls.date, ls.time; "
                << teacher
                >> [&done, peer_id](uint time, string str__arr_date, string name, string place) {

                    json arr_date = json::parse(str__arr_date);
                    string text_message_lesson;

                    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                    text_message_lesson += name + "\n";

                    // –ê—É–¥–∏—Ç–æ—Ä–∏—è
                    text_message_lesson += "–ê—É–¥–∏—Ç–æ—Ä–∏—è: " + place + "\n";

                    // –î–∞—Ç—ã
                    text_message_lesson += "–î–∞—Ç—ã:\n";
                    for (uint i = 0; arr_date.size() > i; i++) {
                        uint date = arr_date[i];
                        text_message_lesson += "‚Äì ";

                        // –û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞
                        if (date < 9999) {
                            text_message_lesson += to_string(date % 100) + "." + to_string(date / 100) ;
                        }
                        
                        // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è
                        else {
                            // –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞
                            text_message_lesson += to_string((date % 10000) % 100) + "." + to_string((date % 10000) / 100);
                            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                            text_message_lesson += " - ";
                            // –î–∞–ª—å–Ω—è—è –¥–∞—Ç–∞
                            text_message_lesson += to_string(((date / 10000) % 10000) % 100) + "." + to_string(((date / 10000) % 10000) / 100);

                            if ((date / 100000000) == 1) {
                                text_message_lesson += " –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é";
                            } else {
                                text_message_lesson += " —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é";
                            }
                        }

                        text_message_lesson += "\n";
                    }

                    // –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
                    if (time == 1) { text_message_lesson += string("–í—Ä–µ–º—è: 08:30 - 10:10"); } else
                    if (time == 2) { text_message_lesson += string("–í—Ä–µ–º—è: 10:20 - 12:00"); } else
                    if (time == 3) { text_message_lesson += string("–í—Ä–µ–º—è: 12:20 - 14:00"); } else
                    if (time == 4) { text_message_lesson += string("–í—Ä–µ–º—è: 14:10 - 15:50"); } else
                    if (time == 5) { text_message_lesson += string("–í—Ä–µ–º—è: 16:00 - 17:40"); } else
                    if (time == 6) { text_message_lesson += string("–í—Ä–µ–º—è: 18:00 - 19:30"); } else
                    if (time == 7) { text_message_lesson += string("–í—Ä–µ–º—è: 19:40 - 21:10"); } else
                                   { text_message_lesson += string("–í—Ä–µ–º—è: 21:20 - 22:50"); }


                    if (place != "null") {
                        easy::vkapi::messages_send(text_message_lesson, peer_id);
                        done = true;
                    }
                    
                };
            }

            if (done) {
                user_stage = string("menu_") + string(user_cache["menu"]);
            }

        }

        // --------------------------------------------------------------------

        // –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
        if (user_stage != this_stage) {
            data_base::set_user_cache(peer_id, user_cache);
            stage::function[user_stage](message);
        }

        else { easy::vkapi::messages_send(string("üòî –¢–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å –≤ —ç—Ç–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é."), peer_id); }
    }
    

}