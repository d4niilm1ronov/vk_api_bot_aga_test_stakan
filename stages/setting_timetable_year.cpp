#include <iostream>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <map>

#include <string>

#include <curl/curl.h>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite 3 & C++
#include "../sqlite_modern_cpp/hdr/sqlite_modern_cpp.h"

// VK API
#include "../vkAPI/support/very_eassy_curl.hpp"
#include "../vkAPI/vk_api.hpp"
#include "../vkAPI/long_poll.hpp"
#include "../vkAPI/token_vk.hpp"

#include "../data_base.hpp"

#include "../additionally.hpp"

#include "../stage.hpp"

/* ////////////////////////////////////////////////////////////////////////

{
    "text":"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≥—Ä—É–ø–ø—ã üìÖ",
    "keyboard":{
        "buttons":[
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–ò–Ω—Å—Ç–∏—Ç—É—Ç",
                        "payload":"1"
                    },
                    "color":"primary"
                }
            ],
            [
                {
                    "action":{
                        "type":"text",
                        "label":"–ù–∞–∑–∞–¥",
                        "payload":"20545"
                    },
                    "color":"secondary"
                }
            ]
        ]
    }
}

*/ ////////////////////////////////////////////////////////////////////////

void stage :: setting_timetable_year (const json& message) {
    // –°–µ–π—á–∞—Å –≤ –∫—ç—à–µ:
    //  1. ["institute"] = uint
    //  2. ["menu"] = string

    const string current_stage = "setting_timetable_year";

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    uint   peer_id    = message["peer_id"];
    string next_stage = data_base::get_user_stage(peer_id);
    json   user_cache = data_base::get_user_cache(peer_id);


    // --------------------------------------------------------------------
        //  –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫—ç—à:
        //   1. year = [uint]

    if (next_stage != current_stage) {

        
        if (user_cache.count("year")) { user_cache.erase("year"); }
        if (user_cache.count("group")) { user_cache.erase("group"); }
        

        json final_message = stage::message[current_stage];
        json button = final_message["keyboard"]["buttons"][0];

        uint institute = user_cache["institute"];


        // –ü—Ä–æ–±–∏–≥–∞–µ–º –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        {
            data_base::db
            << "SELECT DISTINCT year FROM group_stankin WHERE institute = ?;" << institute
            >> [&final_message, &button, &user_cache, institute] (int year) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç+–≥–æ–¥_–Ω–∞—á–∞–ª–∞_–æ–±—É—á–µ–Ω–∏—è
                string str__institute_year;
                {
                    switch (institute) {
                        case 10: str__institute_year = "–ò–î–ë-"; break;
                        case 20: str__institute_year = "–ê–î–ë-"; break;
                        case 30: str__institute_year = "–ú–î–ë-"; break;
                        case 40: str__institute_year = "–≠–î–ë-"; break;
                    }

                    str__institute_year += to_string(year);
                }

                // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                user_cache["year"].push_back(year);

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –í—Å—Ç–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
                button[0]["action"]["label"]   = str__institute_year;
                button[0]["action"]["payload"] = to_string(year);
                final_message["keyboard"]["buttons"].push_back(button);

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç—Ä–æ—á–∫–∏)
                final_message["text"] = string(final_message["text"])
                        + "\n" + to_string(user_cache["year"].size()) + ") " + str__institute_year;
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            final_message["keyboard"]["buttons"].push_back(final_message["keyboard"]["buttons"][1]);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –Ω–∞–∑–∞–¥
            final_message["text"] = string(final_message["text"]) + "\n0) –ù–∞–∑–∞–¥";

            // –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            final_message["keyboard"]["buttons"].erase(0);
            final_message["keyboard"]["buttons"].erase(0);
        }


        data_base::set_user_cache(peer_id, user_cache);

        data_base::set_user_stage(peer_id, current_stage);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        easy::vkapi::messages_send(final_message, peer_id);
    }


    // --------------------------------------------------------------------
        //  –ò–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ –∫—ç—à–µ:
        //   1. ( year = [uint] )  =>  ( year = uint )

    else {

        // –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        if (message.count("payload")) {
            if (message["payload"] != "20545") {
                user_cache.erase("year");
                user_cache["year"] = stoi(string(message["payload"]));
                next_stage = "setting_timetable_group";
            }
            
            else {
                next_stage = "setting_timetable_institute";
            }
        }
        

        // –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç
        else {
            if (message["text"] != "0") {

                for (int i = 0; i < user_cache["year"].size(); i++) {
                    if (to_string(i + 1) == message["text"]) {
                        user_cache.erase("year");
                        user_cache["year"] = user_cache["year"][i];
                        next_stage = "setting_timetable_group";
                    }
                }
            }
            
            else {
                next_stage = "setting_timetable_institute";
            }
        }


        // --------------------------------------------------------------------


        data_base::set_user_cache(peer_id, user_cache);

        if (next_stage != current_stage) { stage::function[next_stage](message); }

        else { easy::vkapi::messages_send(string("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–∑ –º–µ–Ω—é üëÜ"), peer_id); }


    }
    

}